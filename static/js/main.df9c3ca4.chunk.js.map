{"version":3,"sources":["types.ts","components/Buttons.tsx","components/List.tsx","App.tsx","index.tsx"],"names":["SortType","Buttons","state","setState","goodsFromServer","className","onClick","sortedVisibleGoods","sort","a","b","localeCompare","reverse","prevState","sortField","Alphabet","visibleGoods","type","classNames","length","Length","Default","List","map","item","App","useState","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,oFAAAA,K,gBAAAA,E,oBAAAA,E,YAAAA,M,gBCICC,EAAiC,SAAC,GAEzC,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,SAAUC,EAChB,EADgBA,gBAiDnB,OACE,8BACE,sBAAKC,UAAU,UAAf,UACE,wBACEC,QA3BR,WACE,IAAMC,EAAqB,YAAIH,GAC5BI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAE9BR,EAAMU,SACRL,EAAmBK,UAGrBT,GAAS,SAAAU,GAAS,kCACbA,GADa,IAEhBC,UAAWd,EAASe,SACpBC,aAAcT,QAiBVU,KAAK,SACLZ,UAAWa,IAAW,SAAU,UAAW,CACzC,WAAYhB,EAAMY,YAAcd,EAASe,WAJ7C,iCAUA,wBACET,QArDR,WACE,IAAMC,EAAqB,YAAIH,GAAiBI,MAC9C,SAACC,EAAGC,GAAJ,OAAUD,EAAEU,OAAST,EAAES,UAGrBjB,EAAMU,SACRL,EAAmBK,UAGrBT,GAAS,SAAAU,GAAS,kCACbA,GADa,IAEhBC,UAAWd,EAASoB,OACpBJ,aAAcT,QA0CVU,KAAK,SACLZ,UAAWa,IAAW,SAAU,aAAc,CAC5C,WAAYhB,EAAMY,YAAcd,EAASoB,SAJ7C,4BAUA,wBACEd,QAvER,WACEH,GAAS,SAAAU,GAAS,kCACbA,GADa,IAEhBD,SAAUC,EAAUD,QACpBI,aAAc,YAAIH,EAAUG,cAAcJ,gBAoEtCK,KAAK,SACLZ,UAAWa,IAAW,SAAU,aAAc,CAC5C,YAA8B,IAAlBhB,EAAMU,UAJtB,qBAUCV,EAAMY,WAAaZ,EAAMU,QACxB,wBACEN,QA3CV,WACEH,EAAS,CACPS,SAAS,EACTE,UAAWd,EAASqB,QACpBL,aAAa,YAAKZ,MAwCZa,KAAK,SACLZ,UAAU,4BAHZ,mBAOE,WC5FCiB,EAA4B,SAAC,GAAsB,IAApBN,EAAmB,EAAnBA,aAC1C,OACE,8BACE,6BACGA,EAAaO,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,WCDNpB,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWqB,EAAgB,WAC3B,MAA0BC,mBAAgB,CACxCd,SAAS,EACTE,UAAWd,EAASqB,QACpBL,aAAa,GAAD,OAAMZ,KAHpB,mBAAOF,EAAP,KAAcC,EAAd,KAMA,OACE,sBAAKE,UAAU,kBAAf,UACE,cAAC,EAAD,CACEH,MAAOA,EACPC,SAAUA,EACVC,gBAAiBA,IAGnB,cAAC,EAAD,CAAMY,aAAcd,EAAMc,mBChChCW,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df9c3ca4.chunk.js","sourcesContent":["export enum SortType {\n  Length = 'length',\n  Alphabet = 'alphabet',\n  Default = '',\n}\n\nexport type State = {\n  reverse: boolean;\n  sortField: SortType;\n  visibleGoods: string[];\n};\n\nexport interface ListProps {\n  visibleGoods: string[]\n}\n\nexport interface SetStateFunction {\n  (prevState: State | ((prevState: State) => State)): void;\n}\n\nexport interface ButtonProps {\n  state: State;\n  setState: SetStateFunction;\n  goodsFromServer: string[];\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ButtonProps, SortType } from '../types';\n\nexport const Buttons: React.FC<ButtonProps> = (\n  { state, setState, goodsFromServer },\n) => {\n  function reverseGoods(): void {\n    setState(prevState => ({\n      ...prevState,\n      reverse: !prevState.reverse,\n      visibleGoods: [...prevState.visibleGoods].reverse(),\n    }));\n  }\n\n  function sortByLength(): void {\n    const sortedVisibleGoods = [...goodsFromServer].sort(\n      (a, b) => a.length - b.length,\n    );\n\n    if (state.reverse) {\n      sortedVisibleGoods.reverse();\n    }\n\n    setState(prevState => ({\n      ...prevState,\n      sortField: SortType.Length,\n      visibleGoods: sortedVisibleGoods,\n    }));\n  }\n\n  function sortByAlphabet(): void {\n    const sortedVisibleGoods = [...goodsFromServer]\n      .sort((a, b) => a.localeCompare(b));\n\n    if (state.reverse) {\n      sortedVisibleGoods.reverse();\n    }\n\n    setState(prevState => ({\n      ...prevState,\n      sortField: SortType.Alphabet,\n      visibleGoods: sortedVisibleGoods,\n    }));\n  }\n\n  function resetGoods(): void {\n    setState({\n      reverse: false,\n      sortField: SortType.Default,\n      visibleGoods: [...goodsFromServer],\n    });\n  }\n\n  return (\n    <div>\n      <div className=\"buttons\">\n        <button\n          onClick={sortByAlphabet}\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': state.sortField !== SortType.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={sortByLength}\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': state.sortField !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverseGoods}\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': state.reverse !== true,\n          })}\n        >\n          Reverse\n        </button>\n\n        {state.sortField || state.reverse ? (\n          <button\n            onClick={resetGoods}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n    </div>\n  );\n};\n","import React from 'react';\nimport { ListProps } from '../types';\n\nexport const List: React.FC<ListProps> = ({ visibleGoods }) => {\n  return (\n    <div>\n      <ul>\n        {visibleGoods.map(item => (\n          <li key={item} data-cy=\"Good\">\n            {item}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Buttons } from './components/Buttons';\nimport { List } from './components/List';\nimport { SortType, State } from './types';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [state, setState] = useState<State>({\n    reverse: false,\n    sortField: SortType.Default,\n    visibleGoods: [...goodsFromServer],\n  });\n\n  return (\n    <div className=\"section content\">\n      <Buttons\n        state={state}\n        setState={setState}\n        goodsFromServer={goodsFromServer}\n      />\n\n      <List visibleGoods={state.visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}